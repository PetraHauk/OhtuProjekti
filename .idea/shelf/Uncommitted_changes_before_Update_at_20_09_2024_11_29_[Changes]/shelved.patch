Index: src/main/java/controller/VarausController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport java.time.LocalDate;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport app.MockData;\r\nimport model.enteties.Asiakas;\r\nimport model.enteties.Huone;\r\nimport model.enteties.Varaus;\r\n\r\npublic class VarausController {\r\n\r\n    public void luoVaraus(Huone huone, Asiakas asiakas, LocalDate alkuPvm, LocalDate loppuPvm) {\r\n        if (huone == null || asiakas == null || alkuPvm == null || loppuPvm == null) {\r\n            System.out.println(\"Invalid reservation data\");\r\n            return;\r\n        }\r\n\r\n        if (alkuPvm.isAfter(loppuPvm)) {\r\n            System.out.println(\"Invalid reservation dates\");\r\n            return;\r\n        }\r\n\r\n        Varaus varaus = new Varaus(huone, asiakas, alkuPvm, loppuPvm);\r\n\r\n        MockData.addReservation(varaus); // Lisätään varaus tietokantaan\r\n\r\n        huone.setHuone_tila(\"Varattu\");\r\n\r\n        // Debug: Print confirmation of reservation\r\n        // System.out.println(\"Reservation created for Room: \" + huone.getHuoneNro() + \" from \" + alkuPvm + \" to \" + loppuPvm);\r\n    }\r\n\r\n    public void peruVaraus(Varaus varaus) {\r\n        if (varaus == null) {\r\n            System.out.println(\"Invalid reservation data\");\r\n            return;\r\n        }\r\n\r\n        MockData.getMockReservations().remove(varaus); // Poistetaan varaus tietokannasta\r\n\r\n        varaus.getHuone().setHuone_tila(\"Vapaa\");\r\n\r\n        // Debug: Print confirmation of cancellation\r\n        // System.out.println(\"Reservation cancelled for Room: \" + varaus.getHuone().getHuoneNro() + \" from \" + varaus.getAlkuPvm() + \" to \" + varaus.getLoppuPvm());\r\n    }\r\n\r\n    public void muokkaaVarausta(Varaus varaus, Huone uusiHuone, LocalDate alkuPvm, LocalDate loppuPvm){\r\n        if (varaus == null || alkuPvm == null || loppuPvm == null) {\r\n            System.out.println(\"Invalid reservation data\");\r\n            return;\r\n        }\r\n\r\n        if (alkuPvm.isAfter(loppuPvm)) {\r\n            System.out.println(\"Invalid reservation dates\");\r\n            return;\r\n        }\r\n\r\n        varaus.getHuone().setHuone_tila(\"Vapaa\");\r\n        varaus.setHuone(uusiHuone);\r\n        varaus.setAlkuPvm(alkuPvm);\r\n        varaus.setLoppuPvm(loppuPvm);\r\n        varaus.getHuone().setHuone_tila(\"Varattu\");\r\n    }\r\n\r\n    public List<Huone> vapaatHuoneet(LocalDate alkuPvm, LocalDate loppuPvm) {\r\n        List<Huone> huoneet = MockData.getMockRooms();  // Haetaan kaikki huoneet Tietokannasta\r\n        List<Huone> vapaatHuoneet = new ArrayList<>();\r\n\r\n        if (huoneet != null) {\r\n            for (Huone huone : huoneet) {\r\n                if (huoneVapaa(huone, alkuPvm, loppuPvm)) {\r\n                    vapaatHuoneet.add(huone);\r\n                }\r\n            }\r\n        }\r\n        return vapaatHuoneet;\r\n    }\r\n\r\n    public boolean huoneVapaa(Huone huone, LocalDate alkuPvm, LocalDate loppuPvm) {\r\n        List<Varaus> varaukset = MockData.getMockReservations();  // Haetaan kaikki varaukset Tietokannasta\r\n\r\n        if (varaukset != null) {\r\n            for (Varaus varaus : varaukset) {\r\n                if (alkuPvm.isBefore(varaus.getLoppuPvm()) && loppuPvm.isAfter(varaus.getAlkuPvm().minusDays(1))){\r\n                    if (varaus.getHuone().getHuone_nro() == huone.getHuone_nro()) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controller/VarausController.java b/src/main/java/controller/VarausController.java
--- a/src/main/java/controller/VarausController.java	(revision 7c04d0524bcd1513786dac3f4d0d52d8426e5fa8)
+++ b/src/main/java/controller/VarausController.java	(date 1726817191218)
@@ -1,96 +1,38 @@
 package controller;
-
-import java.time.LocalDate;
-import java.util.ArrayList;
-import java.util.List;
-
-import app.MockData;
-import model.enteties.Asiakas;
-import model.enteties.Huone;
 import model.enteties.Varaus;
+import model.DAO.VarausDAO;
+import java.time.LocalDate;
 
 public class VarausController {
-
-    public void luoVaraus(Huone huone, Asiakas asiakas, LocalDate alkuPvm, LocalDate loppuPvm) {
-        if (huone == null || asiakas == null || alkuPvm == null || loppuPvm == null) {
-            System.out.println("Invalid reservation data");
-            return;
-        }
-
-        if (alkuPvm.isAfter(loppuPvm)) {
-            System.out.println("Invalid reservation dates");
-            return;
-        }
-
-        Varaus varaus = new Varaus(huone, asiakas, alkuPvm, loppuPvm);
-
-        MockData.addReservation(varaus); // Lisätään varaus tietokantaan
+    private VarausDAO varausDAO;
 
-        huone.setHuone_tila("Varattu");
-
-        // Debug: Print confirmation of reservation
-        // System.out.println("Reservation created for Room: " + huone.getHuoneNro() + " from " + alkuPvm + " to " + loppuPvm);
+    public VarausController() {
+        varausDAO = new VarausDAO();
     }
 
-    public void peruVaraus(Varaus varaus) {
-        if (varaus == null) {
-            System.out.println("Invalid reservation data");
-            return;
-        }
+    public void AddVaraus(int huone_maara, LocalDate alkuPvm, LocalDate loppuPvm, int huone_id, int lasku_id) {
+        Varaus varaus = new Varaus(0,huone_maara, alkuPvm, loppuPvm, huone_id, lasku_id);
+        varausDAO.persist(varaus);
+    }
 
-        MockData.getMockReservations().remove(varaus); // Poistetaan varaus tietokannasta
-
-        varaus.getHuone().setHuone_tila("Vapaa");
-
-        // Debug: Print confirmation of cancellation
-        // System.out.println("Reservation cancelled for Room: " + varaus.getHuone().getHuoneNro() + " from " + varaus.getAlkuPvm() + " to " + varaus.getLoppuPvm());
+    public Varaus findAllVaraukset() {
+        return varausDAO.haeVaraukset();
     }
 
-    public void muokkaaVarausta(Varaus varaus, Huone uusiHuone, LocalDate alkuPvm, LocalDate loppuPvm){
-        if (varaus == null || alkuPvm == null || loppuPvm == null) {
-            System.out.println("Invalid reservation data");
-            return;
-        }
+    public void findByVarausId(int varaus_id) {
+        varausDAO.haeByVarausId(varaus_id);
+    }
 
-        if (alkuPvm.isAfter(loppuPvm)) {
-            System.out.println("Invalid reservation dates");
-            return;
-        }
+    public void findByLaskuId (int lasku_id) {
+        varausDAO.haeByLaskuId(lasku_id);
+    }
 
-        varaus.getHuone().setHuone_tila("Vapaa");
-        varaus.setHuone(uusiHuone);
-        varaus.setAlkuPvm(alkuPvm);
-        varaus.setLoppuPvm(loppuPvm);
-        varaus.getHuone().setHuone_tila("Varattu");
+    public void updateVarausById(int varaus_id, int huone_maara, LocalDate alkuPvm, LocalDate loppuPvm) {
+        varausDAO.paivitaVarausById(varaus_id, huone_maara, alkuPvm, loppuPvm);
     }
 
-    public List<Huone> vapaatHuoneet(LocalDate alkuPvm, LocalDate loppuPvm) {
-        List<Huone> huoneet = MockData.getMockRooms();  // Haetaan kaikki huoneet Tietokannasta
-        List<Huone> vapaatHuoneet = new ArrayList<>();
+    public void RemoveVaraus(int id) {
+        varausDAO.removeById(id);
 
-        if (huoneet != null) {
-            for (Huone huone : huoneet) {
-                if (huoneVapaa(huone, alkuPvm, loppuPvm)) {
-                    vapaatHuoneet.add(huone);
-                }
-            }
-        }
-        return vapaatHuoneet;
     }
-
-    public boolean huoneVapaa(Huone huone, LocalDate alkuPvm, LocalDate loppuPvm) {
-        List<Varaus> varaukset = MockData.getMockReservations();  // Haetaan kaikki varaukset Tietokannasta
-
-        if (varaukset != null) {
-            for (Varaus varaus : varaukset) {
-                if (alkuPvm.isBefore(varaus.getLoppuPvm()) && loppuPvm.isAfter(varaus.getAlkuPvm().minusDays(1))){
-                    if (varaus.getHuone().getHuone_nro() == huone.getHuone_nro()) {
-                        return false;
-                    }
-                }
-            }
-        }
-        return true;
-    }
-
-}
\ No newline at end of file
+}
Index: src/main/java/controller/HuoneController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport model.DAO.HuoneDAO;\r\nimport model.enteties.Huone;\r\nimport model.enteties.Hotelli;\r\nimport model.DAO.HotelliDAO;\r\n\r\npublic class HuoneController {\r\n    private HuoneDAO huoneDAO;\r\n    private HotelliDAO hotelliDAO;\r\n\r\n    public HuoneController() {\r\n        huoneDAO = new HuoneDAO();\r\n        hotelliDAO = new HotelliDAO();\r\n    }\r\n\r\n    public void lisaaHuone(int huone_nro, String huone_tyyppi, String huone_tila, double huone_hinta, int hotelli_id) {\r\n\r\n        // Tarkista, onko hotelli olemassa\r\n        Hotelli hotelli = hotelliDAO.findById(hotelli_id);\r\n        if (hotelli == null) {\r\n            System.out.println(\"Hotellia ei löytynyt ID:llä \" + hotelli_id);\r\n            return; // Lopetetaan toiminto, jos hotellia ei löydy\r\n        }\r\n\r\n        // Jos hotelli löytyy, lisätään huone\r\n        Huone huone = new Huone(0, huone_nro, huone_tyyppi, huone_tila, huone_hinta, hotelli_id);\r\n        huoneDAO.persist(huone);\r\n        System.out.println(\"Huone lisätty onnistuneesti hotelliin ID:llä \" + hotelli_id);\r\n    }\r\n\r\n    public void FindHuoneetByHoteliId(int hotelli_id) {\r\n        huoneDAO.haeHuoneetByHotelliId(hotelli_id);\r\n    }\r\n\r\n    public void findHuoneById(int id) {\r\n        huoneDAO.findByRoomId(id);\r\n    }\r\n\r\n    public Huone findHuoneByTila(String huone_tila) {\r\n        return huoneDAO.findByHuoneTila(huone_tila);\r\n    }\r\n\r\n    public Huone findHuoneByTyyppi(String huone_tyyppi) {\r\n        return huoneDAO.findByTyyppi(huone_tyyppi);\r\n    }\r\n\r\n    public void updateHuoneById(int id, int huone_nro, String huone_tyyppi, String huone_tila, double huone_hinta) {\r\n        huoneDAO.updateHuoneById(id, huone_nro, huone_tyyppi, huone_tila, huone_hinta);\r\n    }\r\n\r\n\r\n    public void deleteHuone(int id) {\r\n        huoneDAO.removeById(id);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controller/HuoneController.java b/src/main/java/controller/HuoneController.java
--- a/src/main/java/controller/HuoneController.java	(revision 7c04d0524bcd1513786dac3f4d0d52d8426e5fa8)
+++ b/src/main/java/controller/HuoneController.java	(date 1726817697637)
@@ -4,14 +4,22 @@
 import model.enteties.Huone;
 import model.enteties.Hotelli;
 import model.DAO.HotelliDAO;
+import model.enteties.Varaus;
+
+import java.time.LocalDate;
+import java.util.Iterator;
+import java.util.List;
 
 public class HuoneController {
     private HuoneDAO huoneDAO;
     private HotelliDAO hotelliDAO;
 
+    private VarausController varausController;
+
     public HuoneController() {
         huoneDAO = new HuoneDAO();
         hotelliDAO = new HotelliDAO();
+        varausController = new VarausController();
     }
 
     public void lisaaHuone(int huone_nro, String huone_tyyppi, String huone_tila, double huone_hinta, int hotelli_id) {
@@ -54,4 +62,28 @@
         huoneDAO.removeById(id);
     }
 
+    public List<Huone> findVapaatHuoneetByHotelli(int hotelli_id, LocalDate alkuPvm, LocalDate loppuPvm) {
+        List<Huone> huoneet = (List<Huone>) huoneDAO.haeHuoneetByHotelliId(hotelli_id);
+        List<Varaus> varaukset = (List<Varaus>) varausController.findAllVaraukset();
+
+        if (varaukset.isEmpty()) {
+            return huoneet;
+        }
+
+        Iterator<Huone> huoneIterator = huoneet.iterator();
+
+        while (huoneIterator.hasNext()) {
+            Huone huone = huoneIterator.next();
+
+            for (Varaus varaus : varaukset) {
+                if (varaus.getHuoneId() == huone.getHuone_id()
+                    && (alkuPvm.isBefore(varaus.getLoppuPvm())
+                        && loppuPvm.isAfter(varaus.getAlkuPvm().minusDays(1)))) {
+                    huoneIterator.remove();
+                }
+            }
+        }
+        return huoneet;
+    }
+
 }
Index: src/main/java/app/MainPetra.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app;\r\n\r\nimport controller.VarausController;\r\nimport model.enteties.Asiakas;\r\nimport model.enteties.Huone;\r\nimport model.enteties.Varaus;\r\nimport org.checkerframework.checker.units.qual.A;\r\n\r\nimport java.time.LocalDate;\r\nimport java.util.List;\r\n\r\npublic class MainPetra {\r\n    public static void main(String[] args) {\r\n\r\n        // Fetch mock users, rooms, and reservations\r\n        List<Asiakas> users = MockData.getMockUsers();\r\n        List<Huone> rooms = MockData.getMockRooms();\r\n\r\n        /*\r\n        System.out.println(\"Users:\");\r\n        for (Asiakas user : users) {\r\n            System.out.println(user.getEtunimi() + \" \" + user.getSukunimi());\r\n        }\r\n\r\n        System.out.println(\"\\nRooms:\");\r\n        for (Huone room : rooms) {\r\n            System.out.println(room.getHuoneNro() + \" | \" + room.getHinta() + \" | \" + room.getHuoneenTyyppi());\r\n        }\r\n\r\n         */\r\n\r\n        // Test the reservation system\r\n        VarausController controller = new VarausController();\r\n        Asiakas john = users.get(0);\r\n        Huone room1 = rooms.get(0);\r\n\r\n        Asiakas jane = users.get(1);\r\n        Huone room2 = rooms.get(3);\r\n\r\n        Asiakas john2 = users.get(2);\r\n\r\n        // Display available rooms before creating the reservation\r\n        System.out.println(\"\\nAvailable Rooms (before reservation):\");\r\n        List<Huone> availableRooms = controller.vapaatHuoneet(LocalDate.of(2024, 9, 10), LocalDate.of(2024, 9, 15));\r\n        for (Huone availableRoom : availableRooms) {\r\n            System.out.println(\"Room \" + availableRoom.getHuone_nro() + \" (\" + availableRoom.getHuone_tyyppi() + \")\");\r\n        }\r\n\r\n        // Create a reservation\r\n        controller.luoVaraus(room1, john, LocalDate.of(2024, 9, 10), LocalDate.of(2024, 9, 15));\r\n\r\n        List<Varaus> reservations = MockData.getMockReservations();\r\n        System.out.println(\"\\nReservations:\");\r\n        for (Varaus varaus : reservations) {\r\n            System.out.println(\"Room: \" + varaus.getHuone().getHuone_nro() + \" | User: \" + varaus.getAsiakas().getEtunimi() + \" | Dates: \" + varaus.getAlkuPvm() + \" to \" + varaus.getLoppuPvm());\r\n        }\r\n\r\n        controller.luoVaraus(room2, jane, LocalDate.of(2024, 9, 5), LocalDate.of(2024, 9, 10));\r\n\r\n        System.out.println(\"\\nReservations:\");\r\n        for (Varaus varaus : reservations) {\r\n            System.out.println(\"Room: \" + varaus.getHuone().getHuone_nro() + \" | User: \" + varaus.getAsiakas().getEtunimi() + \" | Dates: \" + varaus.getAlkuPvm() + \" to \" + varaus.getLoppuPvm());\r\n        }\r\n\r\n/*\r\n        // Display available rooms after creating the reservation\r\n        System.out.println(\"\\nAvailable Rooms (after reservation):\");\r\n        availableRooms = controller.vapaatHuoneet(LocalDate.of(2024, 9, 10), LocalDate.of(2024, 9, 15));\r\n        for (Huone availableRoom : availableRooms) {\r\n            System.out.println(\"Room \" + availableRoom.getHuone_nro() + \" (\" + availableRoom.getHuone_tyyppi() + \")\");\r\n        }\r\n\r\n\r\n\r\n        // Cancel a reservation\r\n        controller.peruVaraus(reservations.get(0));\r\n\r\n        System.out.println(\"\\nReservations:\");\r\n        for (Varaus varaus : reservations) {\r\n            System.out.println(\"Room: \" + varaus.getHuone().getHuoneNro() + \" | User: \" + varaus.getAsiakas().getEtunimi() + \" | Dates: \" + varaus.getAlkuPvm() + \" to \" + varaus.getLoppuPvm());\r\n        }\r\n\r\n        // Display available rooms after cancelling the reservation\r\n        System.out.println(\"\\nAvailable Rooms (after cancelling reservation):\");\r\n        availableRooms = controller.vapaatHuoneet(LocalDate.of(2024, 9, 10), LocalDate.of(2024, 9, 15));\r\n        for (Huone availableRoom : availableRooms) {\r\n            System.out.println(\"Room \" + availableRoom.getHuoneNro() + \" (\" + availableRoom.getHuoneenTyyppi() + \")\");\r\n        }\r\n\r\n        // Modify a reservation\r\n        controller.muokkaaVarausta(reservations.get(0), room1, LocalDate.of(2024, 9, 6), LocalDate.of(2024, 9, 10));\r\n\r\n        System.out.println(\"\\nReservations:\");\r\n        for (Varaus varaus : reservations) {\r\n            System.out.println(\"Room: \" + varaus.getHuone().getHuoneNro() + \" | User: \" + varaus.getAsiakas().getEtunimi() + \" | Dates: \" + varaus.getAlkuPvm() + \" to \" + varaus.getLoppuPvm());\r\n        }\r\n\r\n        // Display available rooms after modifying the reservation\r\n        System.out.println(\"\\nAvailable Rooms (after modifying reservation):\");\r\n        availableRooms = controller.vapaatHuoneet(LocalDate.of(2024, 9, 5), LocalDate.of(2024, 9, 12));\r\n        for (Huone availableRoom : availableRooms) {\r\n            System.out.println(\"Room \" + availableRoom.getHuoneNro() + \" (\" + availableRoom.getHuoneenTyyppi() + \")\");\r\n        }\r\n\r\n         */\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/app/MainPetra.java b/src/main/java/app/MainPetra.java
--- a/src/main/java/app/MainPetra.java	(revision 7c04d0524bcd1513786dac3f4d0d52d8426e5fa8)
+++ b/src/main/java/app/MainPetra.java	(date 1726819886700)
@@ -1,108 +1,32 @@
 package app;
 
-import controller.VarausController;
-import model.enteties.Asiakas;
+import controller.HuoneController;
 import model.enteties.Huone;
 import model.enteties.Varaus;
-import org.checkerframework.checker.units.qual.A;
 
 import java.time.LocalDate;
 import java.util.List;
+import java.util.Locale;
 
 public class MainPetra {
     public static void main(String[] args) {
 
-        // Fetch mock users, rooms, and reservations
-        List<Asiakas> users = MockData.getMockUsers();
-        List<Huone> rooms = MockData.getMockRooms();
-
-        /*
-        System.out.println("Users:");
-        for (Asiakas user : users) {
-            System.out.println(user.getEtunimi() + " " + user.getSukunimi());
-        }
-
-        System.out.println("\nRooms:");
-        for (Huone room : rooms) {
-            System.out.println(room.getHuoneNro() + " | " + room.getHinta() + " | " + room.getHuoneenTyyppi());
-        }
-
-         */
-
-        // Test the reservation system
-        VarausController controller = new VarausController();
-        Asiakas john = users.get(0);
-        Huone room1 = rooms.get(0);
-
-        Asiakas jane = users.get(1);
-        Huone room2 = rooms.get(3);
-
-        Asiakas john2 = users.get(2);
-
-        // Display available rooms before creating the reservation
-        System.out.println("\nAvailable Rooms (before reservation):");
-        List<Huone> availableRooms = controller.vapaatHuoneet(LocalDate.of(2024, 9, 10), LocalDate.of(2024, 9, 15));
-        for (Huone availableRoom : availableRooms) {
-            System.out.println("Room " + availableRoom.getHuone_nro() + " (" + availableRoom.getHuone_tyyppi() + ")");
-        }
-
-        // Create a reservation
-        controller.luoVaraus(room1, john, LocalDate.of(2024, 9, 10), LocalDate.of(2024, 9, 15));
-
-        List<Varaus> reservations = MockData.getMockReservations();
-        System.out.println("\nReservations:");
-        for (Varaus varaus : reservations) {
-            System.out.println("Room: " + varaus.getHuone().getHuone_nro() + " | User: " + varaus.getAsiakas().getEtunimi() + " | Dates: " + varaus.getAlkuPvm() + " to " + varaus.getLoppuPvm());
-        }
-
-        controller.luoVaraus(room2, jane, LocalDate.of(2024, 9, 5), LocalDate.of(2024, 9, 10));
-
-        System.out.println("\nReservations:");
-        for (Varaus varaus : reservations) {
-            System.out.println("Room: " + varaus.getHuone().getHuone_nro() + " | User: " + varaus.getAsiakas().getEtunimi() + " | Dates: " + varaus.getAlkuPvm() + " to " + varaus.getLoppuPvm());
-        }
-
-/*
-        // Display available rooms after creating the reservation
-        System.out.println("\nAvailable Rooms (after reservation):");
-        availableRooms = controller.vapaatHuoneet(LocalDate.of(2024, 9, 10), LocalDate.of(2024, 9, 15));
-        for (Huone availableRoom : availableRooms) {
-            System.out.println("Room " + availableRoom.getHuone_nro() + " (" + availableRoom.getHuone_tyyppi() + ")");
-        }
-
+        HuoneController huoneController = new HuoneController();
 
+        // Haetaan vapaat huoneet
 
-        // Cancel a reservation
-        controller.peruVaraus(reservations.get(0));
-
-        System.out.println("\nReservations:");
-        for (Varaus varaus : reservations) {
-            System.out.println("Room: " + varaus.getHuone().getHuoneNro() + " | User: " + varaus.getAsiakas().getEtunimi() + " | Dates: " + varaus.getAlkuPvm() + " to " + varaus.getLoppuPvm());
-        }
+        LocalDate alkuPvm = LocalDate.of(2024, 10, 1);
+        LocalDate loppuPvm = LocalDate.of(2024, 10, 10);
 
-        // Display available rooms after cancelling the reservation
-        System.out.println("\nAvailable Rooms (after cancelling reservation):");
-        availableRooms = controller.vapaatHuoneet(LocalDate.of(2024, 9, 10), LocalDate.of(2024, 9, 15));
-        for (Huone availableRoom : availableRooms) {
-            System.out.println("Room " + availableRoom.getHuoneNro() + " (" + availableRoom.getHuoneenTyyppi() + ")");
+        List<Huone> huoneet = huoneController.findVapaatHuoneetByHotelli(1, alkuPvm, loppuPvm);
+        for (Huone huone : huoneet) {
+            System.out.println("Vapaa huone: " + huone + "\n");
         }
 
-        // Modify a reservation
-        controller.muokkaaVarausta(reservations.get(0), room1, LocalDate.of(2024, 9, 6), LocalDate.of(2024, 9, 10));
+        //Varataan huone
 
-        System.out.println("\nReservations:");
-        for (Varaus varaus : reservations) {
-            System.out.println("Room: " + varaus.getHuone().getHuoneNro() + " | User: " + varaus.getAsiakas().getEtunimi() + " | Dates: " + varaus.getAlkuPvm() + " to " + varaus.getLoppuPvm());
-        }
+        Varaus varaus = new Varaus(0,1, alkuPvm, loppuPvm, 1, 1);
 
-        // Display available rooms after modifying the reservation
-        System.out.println("\nAvailable Rooms (after modifying reservation):");
-        availableRooms = controller.vapaatHuoneet(LocalDate.of(2024, 9, 5), LocalDate.of(2024, 9, 12));
-        for (Huone availableRoom : availableRooms) {
-            System.out.println("Room " + availableRoom.getHuoneNro() + " (" + availableRoom.getHuoneenTyyppi() + ")");
-        }
-
-         */
     }
 
 }
Index: src/main/java/controller/VarausControllerAnna.java
===================================================================
diff --git a/src/main/java/controller/VarausControllerAnna.java b/src/main/java/controller/VarausControllerAnna.java
deleted file mode 100644
--- a/src/main/java/controller/VarausControllerAnna.java	(revision 7c04d0524bcd1513786dac3f4d0d52d8426e5fa8)
+++ /dev/null	(revision 7c04d0524bcd1513786dac3f4d0d52d8426e5fa8)
@@ -1,38 +0,0 @@
-package controller;
-import model.enteties.Varaus;
-import model.DAO.VarausDAO;
-import java.time.LocalDate;
-
-public class VarausControllerAnna {
-    private VarausDAO varausDAO;
-
-    public VarausControllerAnna() {
-        varausDAO = new VarausDAO();
-    }
-
-    public void AddVaraus(int huone_maara, LocalDate alkuPvm, LocalDate loppuPvm, int huone_id, int lasku_id) {
-        Varaus varaus = new Varaus(0,huone_maara, alkuPvm, loppuPvm, huone_id, lasku_id);
-        varausDAO.persist(varaus);
-    }
-
-    public Varaus findAllVaraukset() {
-        return varausDAO.haeVaraukset();
-    }
-
-    public void findByVarausId(int varaus_id) {
-        varausDAO.haeByVarausId(varaus_id);
-    }
-
-    public void findByLaskuId (int lasku_id) {
-        varausDAO.haeByLaskuId(lasku_id);
-    }
-
-    public void updateVarausById(int varaus_id, int huone_maara, LocalDate alkuPvm, LocalDate loppuPvm) {
-        varausDAO.paivitaVarausById(varaus_id, huone_maara, alkuPvm, loppuPvm);
-    }
-
-    public void RemoveVaraus(int id) {
-        varausDAO.removeById(id);
-
-    }
-}
Index: src/main/java/app/VarausHaku.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app;\r\n\r\nimport controller.VarausControllerAnna;\r\n\r\nimport java.text.ParseException;\r\nimport java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.format.DateTimeParseException;\r\nimport java.util.Scanner;\r\n\r\npublic class VarausHaku {\r\n    private VarausControllerAnna controller = new VarausControllerAnna();\r\n    private Scanner scanner = new Scanner(System.in);\r\n    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd.MM.yyyy\");\r\n\r\n    public void start() {\r\n        while (true) {\r\n            System.out.println(\"Valitse toiminto:\");\r\n            System.out.println(\"1. Lisää uusi varaus\");\r\n            System.out.println(\"2. Hae varaus_ID:llä\");\r\n            System.out.println(\"3. Hae lasku_ID:llä\");\r\n            System.out.println(\"4. Päivitä varauksen kesto varaus_ID:llä\");\r\n            System.out.println(\"5. Poista varaus\");\r\n            System.out.println(\"6. Hae kaikki varaukset\");\r\n            System.out.println(\"7. Lopeta\");\r\n\r\n            int valinta = scanner.nextInt();\r\n            scanner.nextLine(); // Tyhjennä puskuri\r\n\r\n            switch (valinta) {\r\n                case 1:\r\n                    try {\r\n                        System.out.println(\"Anna huoneen määrä:\");\r\n                        int huone_maara = scanner.nextInt();\r\n                        scanner.nextLine();\r\n\r\n                        System.out.println(\"Anna alkupäivämäärä (pp.kk.vvvv):\");\r\n                        String alkuPvmStr = scanner.nextLine();\r\n                        LocalDate alkuPvm = LocalDate.parse(alkuPvmStr, formatter);\r\n\r\n                        System.out.println(\"Anna loppupäivämäärä (pp.kk.vvvv):\");\r\n                        String loppuPvmStr = scanner.nextLine();\r\n                        LocalDate loppuPvm = LocalDate.parse(loppuPvmStr, formatter);\r\n\r\n                        System.out.println(\"Anna huone_ID:\");\r\n                        int huone_id = scanner.nextInt();\r\n                        scanner.nextLine();\r\n\r\n                        System.out.println(\"Anna lasku_ID:\");\r\n                        int lasku_id = scanner.nextInt();\r\n                        scanner.nextLine();\r\n\r\n                        controller.AddVaraus(huone_maara, alkuPvm, loppuPvm, huone_id, lasku_id);\r\n                        System.out.println(\"Varaus lisätty onnistuneesti!\");\r\n\r\n                    } catch (DateTimeParseException e) {\r\n                        System.out.println(\"Virhe päivämäärän syötössä. Käytä muotoa pp.kk.vvvv.\");\r\n                    }\r\n                    break;\r\n\r\n                case 2:\r\n                    System.out.println(\"Anna varauksen ID:\");\r\n                    int idHaku = scanner.nextInt();\r\n                    scanner.nextLine();\r\n                    controller.findByVarausId(idHaku);\r\n                    break;\r\n\r\n                case 3:\r\n                    System.out.println(\"Anna laskun ID:\");\r\n                    int lasku_id_haku = scanner.nextInt();\r\n                    scanner.nextLine();\r\n                    controller.findByLaskuId(lasku_id_haku);\r\n                    break;\r\n\r\n                case 4:\r\n                    try {\r\n                        System.out.println(\"Anna varauksen ID:\");\r\n                        int id = scanner.nextInt();\r\n                        scanner.nextLine(); // Tyhjennä puskuri\r\n\r\n                        System.out.println(\"Anna uusi huoneen määrä:\");\r\n                        int huone_maara_uusi = scanner.nextInt();\r\n                        scanner.nextLine();\r\n\r\n                        System.out.println(\"Anna uusi alkupäivämäärä (pp.kk.vvvv):\");\r\n                        String alku_pvm_uusi = scanner.nextLine();\r\n                        LocalDate uusiAlkuPvm = LocalDate.parse(alku_pvm_uusi, formatter); // Muunnetaan LocalDateksi\r\n\r\n                        System.out.println(\"Anna uusi loppupäivämäärä (pp.kk.vvvv):\");\r\n                        String loppu_pvm_uusi = scanner.nextLine();\r\n                        LocalDate uusiLoppuPvm = LocalDate.parse(loppu_pvm_uusi, formatter); // Muunnetaan LocalDateksi\r\n\r\n                        // Päivitä varauksen kesto\r\n                        controller.updateVarausById(id, huone_maara_uusi, uusiAlkuPvm, uusiLoppuPvm);\r\n                        System.out.println(\"Varauksen kesto päivitetty onnistuneesti!\");\r\n\r\n                    } catch (DateTimeParseException e) {\r\n                        System.out.println(\"Virhe päivämäärän syötössä. Käytä muotoa pp.kk.vvvv.\");\r\n                    }\r\n                    break;\r\n\r\n                case 5:\r\n                    System.out.println(\"Anna varauksen ID:\");\r\n                    int idPoisto = scanner.nextInt();\r\n                    scanner.nextLine();\r\n                    controller.RemoveVaraus(idPoisto);\r\n                    break;\r\n\r\n                case 6:\r\n                    controller.findAllVaraukset();\r\n                case 7:\r\n                    return;\r\n\r\n                default:\r\n                    System.out.println(\"Virheellinen valinta. Yritä uudelleen.\");\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/app/VarausHaku.java b/src/main/java/app/VarausHaku.java
--- a/src/main/java/app/VarausHaku.java	(revision 7c04d0524bcd1513786dac3f4d0d52d8426e5fa8)
+++ b/src/main/java/app/VarausHaku.java	(date 1726817191223)
@@ -1,15 +1,14 @@
 package app;
 
-import controller.VarausControllerAnna;
+import controller.VarausController;
 
-import java.text.ParseException;
 import java.time.LocalDate;
 import java.time.format.DateTimeFormatter;
 import java.time.format.DateTimeParseException;
 import java.util.Scanner;
 
 public class VarausHaku {
-    private VarausControllerAnna controller = new VarausControllerAnna();
+    private VarausController controller = new VarausController();
     private Scanner scanner = new Scanner(System.in);
     DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"AnnaMain\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"app.AnnaMain\" />\r\n      <module name=\"gui\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"app.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"app.Main\" />\r\n      <module name=\"gui\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"app.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"MainPetra\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"app.MainPetra\" />\r\n      <module name=\"gui\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"app.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.MainPetra\" />\r\n        <item itemvalue=\"Application.Main\" />\r\n        <item itemvalue=\"Application.AnnaMain\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 7c04d0524bcd1513786dac3f4d0d52d8426e5fa8)
+++ b/.idea/workspace.xml	(date 1726820940202)
@@ -1,6 +1,65 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="RunManager">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
+  <component name="ChangeListManager">
+    <list default="true" id="8c6cd58b-5a82-4bea-9aff-d8e371835481" name="Changes" comment="">
+      <change afterPath="$PROJECT_DIR$/src/main/java/controller/VarausControllerPetra.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gitIgnore" beforeDir="false" afterPath="$PROJECT_DIR$/.gitIgnore" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/dataSources.local.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources.local.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_9_2024_10_00__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_9_2024_10_00__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/app/HuoneHaku.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/app/HuoneHaku.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/app/MainPetra.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/app/MainPetra.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/app/MockData.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/app/MockData.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/app/VarausHaku.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/app/VarausHaku.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/controller/HuoneController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/controller/HuoneController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/controller/VarausController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/controller/VarausController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/controller/VarausControllerAnna.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/model/enteties/Huone.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/model/enteties/Huone.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/META-INF/persistence.xml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/META-INF/persistence.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/target/classes/META-INF/persistence.xml" beforeDir="false" afterPath="$PROJECT_DIR$/src/target/classes/META-INF/persistence.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/target/classes/app/AnnaMain.class" beforeDir="false" afterPath="$PROJECT_DIR$/src/target/classes/app/AnnaMain.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/target/classes/app/HotelliHaku.class" beforeDir="false" afterPath="$PROJECT_DIR$/src/target/classes/app/HotelliHaku.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/target/classes/app/HuoneHaku.class" beforeDir="false" afterPath="$PROJECT_DIR$/src/target/classes/app/HuoneHaku.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/target/classes/app/KayttajaHaku.class" beforeDir="false" afterPath="$PROJECT_DIR$/src/target/classes/app/KayttajaHaku.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/target/classes/app/MainPetra.class" beforeDir="false" afterPath="$PROJECT_DIR$/src/target/classes/app/MainPetra.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/target/classes/controller/HotelliController.class" beforeDir="false" afterPath="$PROJECT_DIR$/src/target/classes/controller/HotelliController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/target/classes/controller/HuoneController.class" beforeDir="false" afterPath="$PROJECT_DIR$/src/target/classes/controller/HuoneController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/target/classes/controller/KayttajaController.class" beforeDir="false" afterPath="$PROJECT_DIR$/src/target/classes/controller/KayttajaController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/target/classes/controller/VarausController.class" beforeDir="false" afterPath="$PROJECT_DIR$/src/target/classes/controller/VarausController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/target/classes/model/DAO/AsiakasDAO.class" beforeDir="false" afterPath="$PROJECT_DIR$/src/target/classes/model/DAO/AsiakasDAO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/target/classes/model/DAO/HotelliDAO.class" beforeDir="false" afterPath="$PROJECT_DIR$/src/target/classes/model/DAO/HotelliDAO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/target/classes/model/DAO/HuoneDAO.class" beforeDir="false" afterPath="$PROJECT_DIR$/src/target/classes/model/DAO/HuoneDAO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/target/classes/model/DAO/KayttajaDAO.class" beforeDir="false" afterPath="$PROJECT_DIR$/src/target/classes/model/DAO/KayttajaDAO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/target/classes/model/DAO/VarausDAO.class" beforeDir="false" afterPath="$PROJECT_DIR$/src/target/classes/model/DAO/VarausDAO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/target/classes/model/enteties/Asiakas.class" beforeDir="false" afterPath="$PROJECT_DIR$/src/target/classes/model/enteties/Asiakas.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/target/classes/model/enteties/Huone.class" beforeDir="false" afterPath="$PROJECT_DIR$/src/target/classes/model/enteties/Huone.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/target/classes/model/enteties/Kayttaja.class" beforeDir="false" afterPath="$PROJECT_DIR$/src/target/classes/model/enteties/Kayttaja.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/target/classes/model/enteties/Varaus.class" beforeDir="false" afterPath="$PROJECT_DIR$/src/target/classes/model/enteties/Varaus.class" afterDir="false" />
+    </list>
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$" value="Petra" />
+      </map>
+    </option>
+  </component>
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "Application.MainPetra.executor": "Run",
+    "git-widget-placeholder": "main",
+    "node.js.selected.package.tslint": "(autodetect)"
+  }
+}]]></component>
+  <component name="RunManager" selected="Application.MainPetra">
     <configuration name="AnnaMain" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="app.AnnaMain" />
       <module name="gui" />
@@ -40,12 +99,30 @@
         <option name="Make" enabled="true" />
       </method>
     </configuration>
+    <configuration name="WilmaMain" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="app.WilmaMain" />
+      <module name="gui" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="app.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
     <recent_temporary>
       <list>
+        <item itemvalue="Application.WilmaMain" />
         <item itemvalue="Application.MainPetra" />
         <item itemvalue="Application.Main" />
         <item itemvalue="Application.AnnaMain" />
+        <item itemvalue="Application.MainPetra" />
       </list>
     </recent_temporary>
   </component>
+  <component name="TaskManager">
+    <servers />
+  </component>
 </project>
\ No newline at end of file
Index: src/main/java/model/enteties/Huone.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.enteties;\r\nimport jakarta.persistence.*;\r\n\r\n@Entity\r\n@Table(name = \"huone\")\r\npublic class Huone {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY) // Tämä mahdollistaa automaattisen ID:n generoinnin\r\n    private int huone_id;\r\n\r\n    @Column(name = \"huone_nro\")\r\n    private int huone_nro;\r\n\r\n    @Column(name = \"huone_tyyppi\")\r\n    private String huone_tyyppi;\r\n\r\n    @Column(name = \"huone_tila\")\r\n    private String huone_tila;\r\n\r\n    @Column(name = \"huone_hinta\")\r\n    private double huone_hinta;\r\n\r\n    @Column(name = \"hotelli_id\")\r\n    private int hotelli_id;\r\n\r\n    public Huone(int huone_id, int huone_nro, String huone_tyyppi, String huone_tila, double huone_hinta, int hotelli_id) {\r\n        this.huone_id = huone_id;\r\n        this.huone_nro = huone_nro;\r\n        this.huone_tyyppi = huone_tyyppi;\r\n        this.huone_tila = huone_tila;\r\n        this.huone_hinta = huone_hinta;\r\n        this.hotelli_id = hotelli_id;\r\n    }\r\n\r\n\r\n    public Huone() {\r\n    }\r\n\r\n    public int getHuone_id() {\r\n        return huone_id;\r\n    }\r\n\r\n    public int getHuone_nro() {\r\n        return huone_nro;\r\n    }\r\n\r\n    public String getHuone_tyyppi() {\r\n        return huone_tyyppi;\r\n    }\r\n\r\n    public String getHuone_tila() {\r\n        return huone_tila;\r\n    }\r\n\r\n    public double getHuone_hinta() {\r\n        return huone_hinta;\r\n    }\r\n\r\n    public int getHotelli_id() {\r\n        return hotelli_id;\r\n    }\r\n\r\n    public void setHuone_nro(int huone_nro) {\r\n        this.huone_nro = huone_nro;\r\n    }\r\n\r\n    public void setHuone_tyyppi(String huone_tyyppi) {\r\n        this.huone_tyyppi = huone_tyyppi;\r\n    }\r\n\r\n    public void setHuone_tila(String huone_tila) {\r\n        this.huone_tila = huone_tila;\r\n    }\r\n\r\n    public void setHuone_hinta(double huone_hinta) {\r\n        this.huone_hinta = huone_hinta;\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/enteties/Huone.java b/src/main/java/model/enteties/Huone.java
--- a/src/main/java/model/enteties/Huone.java	(revision 7c04d0524bcd1513786dac3f4d0d52d8426e5fa8)
+++ b/src/main/java/model/enteties/Huone.java	(date 1726817191226)
@@ -37,6 +37,9 @@
     public Huone() {
     }
 
+    public Huone getHuone() {
+        return this;
+    }
     public int getHuone_id() {
         return huone_id;
     }
Index: .gitIgnore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/.env\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitIgnore b/.gitIgnore
--- a/.gitIgnore	(revision 7c04d0524bcd1513786dac3f4d0d52d8426e5fa8)
+++ b/.gitIgnore	(date 1726818063896)
@@ -1,1 +1,5 @@
 /.env
+
+src/main/resources/META-INF/persistence.xml
+
+
Index: src/main/resources/META-INF/persistence.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<persistence xmlns=\"https://jakarta.ee/xml/ns/persistence\"\r\n             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n             version=\"3.0\"\r\n             xsi:schemaLocation=\"https://jakarta.ee/xml/ns/persistence https://jakarta.ee/xml/ns/persistence/persistence_3_0.xsd\">\r\n    <persistence-unit name=\"hotelli_db\" transaction-type=\"RESOURCE_LOCAL\">\r\n        <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>\r\n        <properties>\r\n            <property name=\"jakarta.persistence.jdbc.url\" value=\"jdbc:mariadb://localhost:3306/hotelli_db\"/>\r\n            <property name=\"jakarta.persistence.jdbc.user\" value=\"root\"/>\r\n            <property name=\"jakarta.persistence.jdbc.password\" value=\"root\"/>\r\n            <property name=\"jakarta.persistence.jdbc.driver\" value=\"org.mariadb.jdbc.Driver\"/>\r\n            <property name=\"jakarta.persistence.schema-generation.database.action\" value=\"none\"/>\r\n            <property name=\"jakarta.persistence.sql-dialect\" value=\"org.hibernate.dialect.MariaDBDialect\"/>\r\n            <property name=\"hibernate.show_sql\" value=\"true\" />\r\n        </properties>\r\n    </persistence-unit>\r\n</persistence>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/META-INF/persistence.xml b/src/main/resources/META-INF/persistence.xml
--- a/src/main/resources/META-INF/persistence.xml	(revision 7c04d0524bcd1513786dac3f4d0d52d8426e5fa8)
+++ b/src/main/resources/META-INF/persistence.xml	(date 1726817933181)
@@ -8,7 +8,7 @@
         <properties>
             <property name="jakarta.persistence.jdbc.url" value="jdbc:mariadb://localhost:3306/hotelli_db"/>
             <property name="jakarta.persistence.jdbc.user" value="root"/>
-            <property name="jakarta.persistence.jdbc.password" value="root"/>
+            <property name="jakarta.persistence.jdbc.password" value="Suzu"/>
             <property name="jakarta.persistence.jdbc.driver" value="org.mariadb.jdbc.Driver"/>
             <property name="jakarta.persistence.schema-generation.database.action" value="none"/>
             <property name="jakarta.persistence.sql-dialect" value="org.hibernate.dialect.MariaDBDialect"/>
Index: .idea/dataSources.local.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"dataSourceStorageLocal\" created-in=\"IU-233.15619.7\">\r\n    <data-source name=\"@localhost\" uuid=\"aa989b5b-8fef-408c-b7b9-47f367b75a5e\">\r\n      <database-info product=\"MariaDB\" version=\"10.11.2-MariaDB\" jdbc-version=\"4.2\" driver-name=\"MariaDB Connector/J\" driver-version=\"3.0.7\" dbms=\"MARIADB\" exact-version=\"10.11.2\" exact-driver-version=\"3.0\">\r\n        <extra-name-characters>#@</extra-name-characters>\r\n        <identifier-quote-string>`</identifier-quote-string>\r\n      </database-info>\r\n      <case-sensitivity plain-identifiers=\"mixed\" quoted-identifiers=\"mixed\" />\r\n      <secret-storage>master_key</secret-storage>\r\n      <user-name>root</user-name>\r\n      <schema-mapping>\r\n        <introspection-scope>\r\n          <node kind=\"schema\">\r\n            <name qname=\"@\" />\r\n            <name qname=\"hotelli_db\" />\r\n          </node>\r\n        </introspection-scope>\r\n      </schema-mapping>\r\n    </data-source>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/dataSources.local.xml b/.idea/dataSources.local.xml
--- a/.idea/dataSources.local.xml	(revision 7c04d0524bcd1513786dac3f4d0d52d8426e5fa8)
+++ b/.idea/dataSources.local.xml	(date 1726816572675)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="dataSourceStorageLocal" created-in="IU-233.15619.7">
+  <component name="dataSourceStorageLocal" created-in="IU-233.13135.103">
     <data-source name="@localhost" uuid="aa989b5b-8fef-408c-b7b9-47f367b75a5e">
       <database-info product="MariaDB" version="10.11.2-MariaDB" jdbc-version="4.2" driver-name="MariaDB Connector/J" driver-version="3.0.7" dbms="MARIADB" exact-version="10.11.2" exact-driver-version="3.0">
         <extra-name-characters>#@</extra-name-characters>
Index: src/main/java/app/HuoneHaku.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app;\r\n\r\nimport controller.HuoneController;\r\nimport model.enteties.Huone;\r\nimport java.util.Scanner;\r\n\r\npublic class HuoneHaku {\r\n\r\n    private HuoneController controller = new HuoneController();\r\n    private Scanner scanner = new Scanner(System.in);\r\n\r\n    public void start() {\r\n        //Lisää huone ja hae, päivitä, poista\r\n\r\n        while (true) {\r\n            System.out.println(\"Valitse toiminto:\");\r\n            System.out.println(\"1. Lisää uusi huone\");\r\n            System.out.println(\"2. Hae huone_ID:llä\");\r\n            System.out.println(\"3. Hae huoneen tyypillä\");\r\n            System.out.println(\"4. Hae huoneen tilalla\");\r\n            System.out.println(\"5. Päivitä hinta huone_ID:llä\");\r\n            System.out.println(\"6. Päivitä tila huone_ID:llä\");\r\n            System.out.println(\"7. Poista huone\");\r\n            System.out.println(\"8. Lopeta\");\r\n\r\n            int valinta = scanner.nextInt();\r\n            scanner.nextLine(); // Tyhjennä puskuri\r\n\r\n            switch (valinta) {\r\n                case 1:\r\n                    System.out.println(\"Anna huoneen numero:\");\r\n                    int huone_nro = scanner.nextInt();\r\n                    scanner.nextLine();\r\n                    System.out.println(\"Anna huoneen tyyppi:\");\r\n                    String huone_tyyppi = scanner.nextLine();\r\n                    System.out.println(\"Anna huoneen tila:\");\r\n                    String huone_tila = scanner.nextLine();\r\n                    System.out.println(\"Anna huoneen hinta:\");\r\n                    double huone_hinta = scanner.nextDouble();\r\n                    scanner.nextLine();\r\n                    System.out.println(\"Anna hotelli ID:\");\r\n                    int hotelli_id = scanner.nextInt();\r\n                    scanner.nextLine();\r\n\r\n                    controller.lisaaHuone(huone_nro, huone_tyyppi, huone_tila, huone_hinta, hotelli_id);\r\n                    System.out.println(\"Huone lisätty onnistuneesti!\");\r\n                    break;\r\n\r\n                case 2:\r\n                    System.out.println(\"Anna huoneen ID:\");\r\n                    int idHaku = scanner.nextInt();\r\n                    scanner.nextLine();\r\n                    controller.findHuoneById(idHaku);\r\n\r\n                    break;\r\n\r\n                case 3:\r\n                    System.out.println(\"Anna huoneen tyyppi:\");\r\n                    String tyyppiHaku = scanner.nextLine();\r\n                    controller.findHuoneByTyyppi(tyyppiHaku);\r\n                    break;\r\n\r\n                case 4:\r\n                    System.out.println(\"Anna huoneen tila:\");\r\n                    String tilaHaku = scanner.nextLine();\r\n                    controller.findHuoneByTila(tilaHaku);\r\n                    break;\r\n\r\n                case 5:\r\n                    System.out.println(\"Anna huoneen ID:\");\r\n                    int id = scanner.nextInt();\r\n                    scanner.nextLine();\r\n                    System.out.println(\"Anna uusi hinta:\");\r\n                    double uusiHinta = scanner.nextDouble();\r\n                    scanner.nextLine();\r\n                    controller.updateHuoneHintaById(id, uusiHinta);\r\n                    break;\r\n\r\n                case 6:\r\n                    System.out.println(\"Anna huoneen ID:\");\r\n                    int id2 = scanner.nextInt();\r\n                    scanner.nextLine();\r\n                    System.out.println(\"Anna uusi tila:\");\r\n                    String uusiTila = scanner.nextLine();\r\n                    controller.updateHuoneTilaById(id2, uusiTila);\r\n                    break;\r\n\r\n                case 7:\r\n                    System.out.println(\"Anna poistettavan huoneen ID:\");\r\n                    int id3 = scanner.nextInt();\r\n                    scanner.nextLine();\r\n                    controller.deleteHuone(id3);\r\n                    break;\r\n\r\n                case 8:\r\n                    System.out.println(\"Ohjelma lopetetaan.\");\r\n                    return;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n            /*\r\n\r\n            if (valinta == 8) {\r\n                break;\r\n            } else if (valinta == 1) {\r\n                System.out.println(\"Anna huoneen numero:\");\r\n                int huone_nro = scanner.nextInt();\r\n                scanner.nextLine();\r\n                System.out.println(\"Anna huoneen tyyppi:\");\r\n                String huone_tyyppi = scanner.nextLine();\r\n                System.out.println(\"Anna huoneen tila:\");\r\n                String huone_tila = scanner.nextLine();\r\n                System.out.println(\"Anna huoneen hinta:\");\r\n                double huone_hinta = scanner.nextDouble();\r\n                scanner.nextLine();\r\n                System.out.println(\"Anna hotelli ID:\");\r\n                int hotelli_id = scanner.nextInt();\r\n                scanner.nextLine();\r\n\r\n                controller.lisaaHuone(huone_nro, huone_tyyppi, huone_tila, huone_hinta, hotelli_id);\r\n\r\n            } else if (valinta == 2) {\r\n                System.out.println(\"Anna huoneen ID:\");\r\n                int idHaku = scanner.nextInt();\r\n                scanner.nextLine();\r\n                Huone huone = controller.findHuoneById(idHaku);\r\n                if (huone != null) {\r\n                    printHuone(huone);\r\n                } else {\r\n                    System.out.println(\"Huonetta ei löytynyt ID:llä \" + idHaku);\r\n                }\r\n            } else if (valinta == 3) {\r\n                System.out.println(\"Anna huoneen tyyppi:\");\r\n                String tyyppiHaku = scanner.nextLine();\r\n                Huone huone = controller.findHuoneByTyyppi(tyyppiHaku);\r\n                if (huone != null) {\r\n                    printHuone(huone);\r\n                } else {\r\n                    System.out.println(\"Huonetta ei löytynyt tyypillä \" + tyyppiHaku);\r\n                }\r\n            } else if (valinta == 4) {\r\n                System.out.println(\"Anna huoneen tila:\");\r\n                String tilaHaku = scanner.nextLine();\r\n                Huone huone = controller.findHuoneByTila(tilaHaku);\r\n                if (huone != null) {\r\n                    printHuone(huone);\r\n                } else {\r\n                    System.out.println(\"Huonetta ei löytynyt tilalla \" + tilaHaku);\r\n                }\r\n            } else if (valinta == 5) {\r\n                System.out.println(\"Anna huoneen ID:\");\r\n                int id = scanner.nextInt();\r\n                scanner.nextLine();\r\n                System.out.println(\"Anna uusi hinta:\");\r\n                double uusiHinta = scanner.nextDouble();\r\n                scanner.nextLine();\r\n                controller.updateHuoneHintaById(id, uusiHinta);\r\n            } else if (valinta == 6) {\r\n                System.out.println(\"Anna huoneen ID:\");\r\n                int id = scanner.nextInt();\r\n                scanner.nextLine();\r\n                System.out.println(\"Anna uusi tila:\");\r\n                String uusiTila = scanner.nextLine();\r\n                controller.updateHuoneTilaById(id, uusiTila);\r\n            } else if (valinta == 7) {\r\n                System.out.println(\"Anna poistettavan huoneen ID:\");\r\n                int id = scanner.nextInt();\r\n                scanner.nextLine();\r\n                controller.deleteHuone(id);\r\n            } else {\r\n                System.out.println(\"Virheellinen valinta!\");\r\n            }\r\n        }\r\n    }\r\n\r\n             */\r\n\r\n    public void printHuone(Huone huone) {\r\n        System.out.println(\"Huoneen numero: \" + huone.getHuone_nro());\r\n        System.out.println(\"Huoneen tyyppi: \" + huone.getHuone_tyyppi());\r\n        System.out.println(\"Huoneen tila: \" + huone.getHuone_tila());\r\n        System.out.println(\"Huoneen hinta: \" + huone.getHuone_hinta());\r\n        System.out.println(\"Hotelli ID: \" + huone.getHotelli_id());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/app/HuoneHaku.java b/src/main/java/app/HuoneHaku.java
--- a/src/main/java/app/HuoneHaku.java	(revision 7c04d0524bcd1513786dac3f4d0d52d8426e5fa8)
+++ b/src/main/java/app/HuoneHaku.java	(date 1726816625623)
@@ -73,7 +73,7 @@
                     System.out.println("Anna uusi hinta:");
                     double uusiHinta = scanner.nextDouble();
                     scanner.nextLine();
-                    controller.updateHuoneHintaById(id, uusiHinta);
+                    //controller.updateHuoneHintaById(id, uusiHinta);
                     break;
 
                 case 6:
@@ -82,7 +82,7 @@
                     scanner.nextLine();
                     System.out.println("Anna uusi tila:");
                     String uusiTila = scanner.nextLine();
-                    controller.updateHuoneTilaById(id2, uusiTila);
+                    //controller.updateHuoneTilaById(id2, uusiTila);
                     break;
 
                 case 7:
Index: src/main/java/app/MockData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app;\r\n\r\nimport model.enteties.Asiakas;\r\nimport model.enteties.Huone;\r\nimport model.enteties.Varaus;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n\r\npublic class MockData {\r\n\r\n    private static List<Varaus> mockReservations = new ArrayList<>();\r\n    private static List<Huone> rooms = new ArrayList<>();\r\n    private static List<Asiakas> customers = new ArrayList<>();\r\n\r\n    public static List<Varaus> getMockReservations() {\r\n        return mockReservations;\r\n    }\r\n\r\n    public static void addReservation(Varaus varaus) {\r\n        mockReservations.add(varaus);\r\n    }\r\n\r\n\r\n    public static List<Asiakas> getMockUsers() {\r\n        customers.add(new Asiakas(\"John\", \"Doe\", \"0401234567\", \"example@sähköposti.com\"));\r\n        customers.add(new Asiakas(\"Jane\", \"Doe\", \"0401234567\", \"example@sähköposti.com\"));\r\n        customers.add(new Asiakas(\"John\", \"Smith\", \"0401234567\", \"example@sähköposti.com\"));\r\n        customers.add(new Asiakas(\"Jane\", \"Smith\", \"0401234567\", \"example@sähköposti.com\"));\r\n        return customers;\r\n    }\r\n\r\n    public static void addAsiakas(Asiakas asiakas) {\r\n        customers.add(asiakas);\r\n    }\r\n\r\n    public static List<Huone> getMockRooms() {\r\n        rooms.add(new Huone(101, 100.0, \"Standard\"));\r\n        rooms.add(new Huone(102, 200.0, \"Suite\"));\r\n        rooms.add(new Huone(103, 200.0, \"Suite\"));\r\n        rooms.add(new Huone(104, 100.0, \"Standard\"));\r\n        rooms.add(new Huone(105, 200.0, \"Suite\"));\r\n        rooms.add(new Huone(106, 100.0, \"Standard\"));\r\n        return rooms;\r\n    }\r\n\r\n    public static void addHuone(Huone huone) {\r\n        rooms.add(huone);\r\n    }\r\n\r\n    public static void removeHuone(Huone huone) {\r\n        rooms.remove(huone);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/app/MockData.java b/src/main/java/app/MockData.java
--- a/src/main/java/app/MockData.java	(revision 7c04d0524bcd1513786dac3f4d0d52d8426e5fa8)
+++ b/src/main/java/app/MockData.java	(date 1726817837928)
@@ -7,7 +7,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-
+/*
 public class MockData {
 
     private static List<Varaus> mockReservations = new ArrayList<>();
@@ -52,4 +52,6 @@
     public static void removeHuone(Huone huone) {
         rooms.remove(huone);
     }
-}
\ No newline at end of file
+}
+
+ */
\ No newline at end of file
Index: src/main/java/controller/VarausControllerPetra.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controller/VarausControllerPetra.java b/src/main/java/controller/VarausControllerPetra.java
new file mode 100644
--- /dev/null	(date 1726817191230)
+++ b/src/main/java/controller/VarausControllerPetra.java	(date 1726817191230)
@@ -0,0 +1,100 @@
+package controller;
+
+import java.time.LocalDate;
+import java.util.ArrayList;
+import java.util.List;
+
+import app.MockData;
+import model.enteties.Asiakas;
+import model.enteties.Huone;
+import model.enteties.Varaus;
+
+public class VarausControllerPetra {
+
+    /*
+
+    public void luoVaraus(Huone huone, Asiakas asiakas, LocalDate alkuPvm, LocalDate loppuPvm) {
+        if (huone == null || asiakas == null || alkuPvm == null || loppuPvm == null) {
+            System.out.println("Invalid reservation data");
+            return;
+        }
+
+        if (alkuPvm.isAfter(loppuPvm)) {
+            System.out.println("Invalid reservation dates");
+            return;
+        }
+
+        Varaus varaus = new Varaus(huone, asiakas, alkuPvm, loppuPvm);
+
+        MockData.addReservation(varaus); // Lisätään varaus tietokantaan
+
+        huone.setHuone_tila("Varattu");
+
+        // Debug: Print confirmation of reservation
+        // System.out.println("Reservation created for Room: " + huone.getHuoneNro() + " from " + alkuPvm + " to " + loppuPvm);
+    }
+
+    public void peruVaraus(Varaus varaus) {
+        if (varaus == null) {
+            System.out.println("Invalid reservation data");
+            return;
+        }
+
+        MockData.getMockReservations().remove(varaus); // Poistetaan varaus tietokannasta
+
+        varaus.getHuone().setHuone_tila("Vapaa");
+
+        // Debug: Print confirmation of cancellation
+        // System.out.println("Reservation cancelled for Room: " + varaus.getHuone().getHuoneNro() + " from " + varaus.getAlkuPvm() + " to " + varaus.getLoppuPvm());
+    }
+
+    public void muokkaaVarausta(Varaus varaus, Huone uusiHuone, LocalDate alkuPvm, LocalDate loppuPvm){
+        if (varaus == null || alkuPvm == null || loppuPvm == null) {
+            System.out.println("Invalid reservation data");
+            return;
+        }
+
+        if (alkuPvm.isAfter(loppuPvm)) {
+            System.out.println("Invalid reservation dates");
+            return;
+        }
+
+        varaus.getHuone().setHuone_tila("Vapaa");
+        varaus.setHuone(uusiHuone);
+        varaus.setAlkuPvm(alkuPvm);
+        varaus.setLoppuPvm(loppuPvm);
+        varaus.getHuone().setHuone_tila("Varattu");
+    }
+
+    public List<Huone> vapaatHuoneet(LocalDate alkuPvm, LocalDate loppuPvm) {
+        List<Huone> huoneet = MockData.getMockRooms();  // Haetaan kaikki huoneet Tietokannasta
+        List<Huone> vapaatHuoneet = new ArrayList<>();
+
+        if (huoneet != null) {
+            for (Huone huone : huoneet) {
+                if (huoneVapaa(huone, alkuPvm, loppuPvm)) {
+                    vapaatHuoneet.add(huone);
+                }
+            }
+        }
+        return vapaatHuoneet;
+    }
+
+    public boolean huoneVapaa(Huone huone, LocalDate alkuPvm, LocalDate loppuPvm) {
+        List<Varaus> varaukset = MockData.getMockReservations();  // Haetaan kaikki varaukset Tietokannasta
+
+        if (varaukset != null) {
+            for (Varaus varaus : varaukset) {
+                if (alkuPvm.isBefore(varaus.getLoppuPvm()) && loppuPvm.isAfter(varaus.getAlkuPvm().minusDays(1))){
+                    if (varaus.getHuone().getHuone_nro() == huone.getHuone_nro()) {
+                        return false;
+                    }
+                }
+            }
+        }
+        return true;
+    }
+
+     */
+
+}
\ No newline at end of file
Index: src/target/classes/META-INF/persistence.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<persistence xmlns=\"https://jakarta.ee/xml/ns/persistence\"\r\n             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n             version=\"3.0\"\r\n             xsi:schemaLocation=\"https://jakarta.ee/xml/ns/persistence https://jakarta.ee/xml/ns/persistence/persistence_3_0.xsd\">\r\n    <persistence-unit name=\"hotelli_db\" transaction-type=\"RESOURCE_LOCAL\">\r\n        <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>\r\n        <properties>\r\n            <property name=\"jakarta.persistence.jdbc.url\" value=\"jdbc:mariadb://localhost:3306/hotelli_db\"/>\r\n            <property name=\"jakarta.persistence.jdbc.user\" value=\"root\"/>\r\n            <property name=\"jakarta.persistence.jdbc.password\" value=\"root\"/>\r\n            <property name=\"jakarta.persistence.jdbc.driver\" value=\"org.mariadb.jdbc.Driver\"/>\r\n            <property name=\"jakarta.persistence.schema-generation.database.action\" value=\"none\"/>\r\n            <property name=\"jakarta.persistence.sql-dialect\" value=\"org.hibernate.dialect.MariaDBDialect\"/>\r\n            <property name=\"hibernate.show_sql\" value=\"true\" />\r\n        </properties>\r\n    </persistence-unit>\r\n</persistence>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/target/classes/META-INF/persistence.xml b/src/target/classes/META-INF/persistence.xml
--- a/src/target/classes/META-INF/persistence.xml	(revision 7c04d0524bcd1513786dac3f4d0d52d8426e5fa8)
+++ b/src/target/classes/META-INF/persistence.xml	(date 1726817933181)
@@ -8,7 +8,7 @@
         <properties>
             <property name="jakarta.persistence.jdbc.url" value="jdbc:mariadb://localhost:3306/hotelli_db"/>
             <property name="jakarta.persistence.jdbc.user" value="root"/>
-            <property name="jakarta.persistence.jdbc.password" value="root"/>
+            <property name="jakarta.persistence.jdbc.password" value="Suzu"/>
             <property name="jakarta.persistence.jdbc.driver" value="org.mariadb.jdbc.Driver"/>
             <property name="jakarta.persistence.schema-generation.database.action" value="none"/>
             <property name="jakarta.persistence.sql-dialect" value="org.hibernate.dialect.MariaDBDialect"/>
