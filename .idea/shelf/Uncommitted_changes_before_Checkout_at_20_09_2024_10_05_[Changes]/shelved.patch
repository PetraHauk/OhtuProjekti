Index: src/main/java/controller/HuoneController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport model.DAO.HuoneDAO;\r\nimport model.enteties.Huone;\r\nimport model.enteties.Hotelli;\r\nimport model.DAO.HotelliDAO;\r\n\r\npublic class HuoneController {\r\n    private HuoneDAO huoneDAO;\r\n    private HotelliDAO hotelliDAO;\r\n\r\n    public HuoneController() {\r\n        huoneDAO = new HuoneDAO();\r\n        hotelliDAO = new HotelliDAO();\r\n    }\r\n\r\n    public void lisaaHuone(int huone_nro, String huone_tyyppi, String huone_tila, double huone_hinta, int hotelli_id) {\r\n\r\n        // Tarkista, onko hotelli olemassa\r\n        Hotelli hotelli = hotelliDAO.findById(hotelli_id);\r\n        if (hotelli == null) {\r\n            System.out.println(\"Hotellia ei löytynyt ID:llä \" + hotelli_id);\r\n            return; // Lopetetaan toiminto, jos hotellia ei löydy\r\n        }\r\n\r\n        // Jos hotelli löytyy, lisätään huone\r\n        Huone huone = new Huone(0, huone_nro, huone_tyyppi, huone_tila, huone_hinta, hotelli_id);\r\n        huoneDAO.persist(huone);\r\n        System.out.println(\"Huone lisätty onnistuneesti hotelliin ID:llä \" + hotelli_id);\r\n    }\r\n\r\n    public void FindHuoneetByHoteliId(int hotelli_id) {\r\n        huoneDAO.haeHuoneetByHotelliId(hotelli_id);\r\n    }\r\n\r\n    public void findHuoneById(int id) {\r\n        huoneDAO.findByRoomId(id);\r\n    }\r\n\r\n    public Huone findHuoneByTila(String huone_tila) {\r\n        return huoneDAO.findByHuoneTila(huone_tila);\r\n    }\r\n\r\n    public Huone findHuoneByTyyppi(String huone_tyyppi) {\r\n        return huoneDAO.findByTyyppi(huone_tyyppi);\r\n    }\r\n\r\n    public void updateHuoneById(int id, int huone_nro, String huone_tyyppi, String huone_tila, double huone_hinta) {\r\n        huoneDAO.updateHuoneById(id, huone_nro, huone_tyyppi, huone_tila, huone_hinta);\r\n    }\r\n\r\n\r\n    public void deleteHuone(int id) {\r\n        huoneDAO.removeById(id);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controller/HuoneController.java b/src/main/java/controller/HuoneController.java
--- a/src/main/java/controller/HuoneController.java	(revision dcc9470b59cd335c270e860564ca760a4f99a565)
+++ b/src/main/java/controller/HuoneController.java	(date 1726815929523)
@@ -5,6 +5,8 @@
 import model.enteties.Hotelli;
 import model.DAO.HotelliDAO;
 
+import java.util.List;
+
 public class HuoneController {
     private HuoneDAO huoneDAO;
     private HotelliDAO hotelliDAO;
@@ -54,4 +56,11 @@
         huoneDAO.removeById(id);
     }
 
+    public List<Huone> findVapaatHuoneetByHotelli(int hotelli_id) {
+        
+
+        return huoneet;
+
+    }
+
 }
Index: src/main/java/app/MainPetra.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app;\r\n\r\nimport controller.VarausController;\r\nimport model.enteties.Asiakas;\r\nimport model.enteties.Huone;\r\nimport model.enteties.Varaus;\r\nimport org.checkerframework.checker.units.qual.A;\r\n\r\nimport java.time.LocalDate;\r\nimport java.util.List;\r\n\r\npublic class MainPetra {\r\n    public static void main(String[] args) {\r\n\r\n        // Fetch mock users, rooms, and reservations\r\n        List<Asiakas> users = MockData.getMockUsers();\r\n        List<Huone> rooms = MockData.getMockRooms();\r\n\r\n        /*\r\n        System.out.println(\"Users:\");\r\n        for (Asiakas user : users) {\r\n            System.out.println(user.getEtunimi() + \" \" + user.getSukunimi());\r\n        }\r\n\r\n        System.out.println(\"\\nRooms:\");\r\n        for (Huone room : rooms) {\r\n            System.out.println(room.getHuoneNro() + \" | \" + room.getHinta() + \" | \" + room.getHuoneenTyyppi());\r\n        }\r\n\r\n         */\r\n\r\n        // Test the reservation system\r\n        VarausController controller = new VarausController();\r\n        Asiakas john = users.get(0);\r\n        Huone room1 = rooms.get(0);\r\n\r\n        Asiakas jane = users.get(1);\r\n        Huone room2 = rooms.get(3);\r\n\r\n        Asiakas john2 = users.get(2);\r\n\r\n        // Display available rooms before creating the reservation\r\n        System.out.println(\"\\nAvailable Rooms (before reservation):\");\r\n        List<Huone> availableRooms = controller.vapaatHuoneet(LocalDate.of(2024, 9, 10), LocalDate.of(2024, 9, 15));\r\n        for (Huone availableRoom : availableRooms) {\r\n            System.out.println(\"Room \" + availableRoom.getHuone_nro() + \" (\" + availableRoom.getHuone_tyyppi() + \")\");\r\n        }\r\n\r\n        // Create a reservation\r\n        controller.luoVaraus(room1, john, LocalDate.of(2024, 9, 10), LocalDate.of(2024, 9, 15));\r\n\r\n        List<Varaus> reservations = MockData.getMockReservations();\r\n        System.out.println(\"\\nReservations:\");\r\n        for (Varaus varaus : reservations) {\r\n            System.out.println(\"Room: \" + varaus.getHuone().getHuone_nro() + \" | User: \" + varaus.getAsiakas().getEtunimi() + \" | Dates: \" + varaus.getAlkuPvm() + \" to \" + varaus.getLoppuPvm());\r\n        }\r\n\r\n        controller.luoVaraus(room2, jane, LocalDate.of(2024, 9, 5), LocalDate.of(2024, 9, 10));\r\n\r\n        System.out.println(\"\\nReservations:\");\r\n        for (Varaus varaus : reservations) {\r\n            System.out.println(\"Room: \" + varaus.getHuone().getHuone_nro() + \" | User: \" + varaus.getAsiakas().getEtunimi() + \" | Dates: \" + varaus.getAlkuPvm() + \" to \" + varaus.getLoppuPvm());\r\n        }\r\n\r\n/*\r\n        // Display available rooms after creating the reservation\r\n        System.out.println(\"\\nAvailable Rooms (after reservation):\");\r\n        availableRooms = controller.vapaatHuoneet(LocalDate.of(2024, 9, 10), LocalDate.of(2024, 9, 15));\r\n        for (Huone availableRoom : availableRooms) {\r\n            System.out.println(\"Room \" + availableRoom.getHuone_nro() + \" (\" + availableRoom.getHuone_tyyppi() + \")\");\r\n        }\r\n\r\n\r\n\r\n        // Cancel a reservation\r\n        controller.peruVaraus(reservations.get(0));\r\n\r\n        System.out.println(\"\\nReservations:\");\r\n        for (Varaus varaus : reservations) {\r\n            System.out.println(\"Room: \" + varaus.getHuone().getHuoneNro() + \" | User: \" + varaus.getAsiakas().getEtunimi() + \" | Dates: \" + varaus.getAlkuPvm() + \" to \" + varaus.getLoppuPvm());\r\n        }\r\n\r\n        // Display available rooms after cancelling the reservation\r\n        System.out.println(\"\\nAvailable Rooms (after cancelling reservation):\");\r\n        availableRooms = controller.vapaatHuoneet(LocalDate.of(2024, 9, 10), LocalDate.of(2024, 9, 15));\r\n        for (Huone availableRoom : availableRooms) {\r\n            System.out.println(\"Room \" + availableRoom.getHuoneNro() + \" (\" + availableRoom.getHuoneenTyyppi() + \")\");\r\n        }\r\n\r\n        // Modify a reservation\r\n        controller.muokkaaVarausta(reservations.get(0), room1, LocalDate.of(2024, 9, 6), LocalDate.of(2024, 9, 10));\r\n\r\n        System.out.println(\"\\nReservations:\");\r\n        for (Varaus varaus : reservations) {\r\n            System.out.println(\"Room: \" + varaus.getHuone().getHuoneNro() + \" | User: \" + varaus.getAsiakas().getEtunimi() + \" | Dates: \" + varaus.getAlkuPvm() + \" to \" + varaus.getLoppuPvm());\r\n        }\r\n\r\n        // Display available rooms after modifying the reservation\r\n        System.out.println(\"\\nAvailable Rooms (after modifying reservation):\");\r\n        availableRooms = controller.vapaatHuoneet(LocalDate.of(2024, 9, 5), LocalDate.of(2024, 9, 12));\r\n        for (Huone availableRoom : availableRooms) {\r\n            System.out.println(\"Room \" + availableRoom.getHuoneNro() + \" (\" + availableRoom.getHuoneenTyyppi() + \")\");\r\n        }\r\n\r\n         */\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/app/MainPetra.java b/src/main/java/app/MainPetra.java
--- a/src/main/java/app/MainPetra.java	(revision dcc9470b59cd335c270e860564ca760a4f99a565)
+++ b/src/main/java/app/MainPetra.java	(date 1726815929528)
@@ -1,5 +1,6 @@
 package app;
 
+import controller.HuoneController;
 import controller.VarausController;
 import model.enteties.Asiakas;
 import model.enteties.Huone;
@@ -12,97 +13,11 @@
 public class MainPetra {
     public static void main(String[] args) {
 
-        // Fetch mock users, rooms, and reservations
-        List<Asiakas> users = MockData.getMockUsers();
-        List<Huone> rooms = MockData.getMockRooms();
-
-        /*
-        System.out.println("Users:");
-        for (Asiakas user : users) {
-            System.out.println(user.getEtunimi() + " " + user.getSukunimi());
-        }
-
-        System.out.println("\nRooms:");
-        for (Huone room : rooms) {
-            System.out.println(room.getHuoneNro() + " | " + room.getHinta() + " | " + room.getHuoneenTyyppi());
-        }
-
-         */
-
-        // Test the reservation system
-        VarausController controller = new VarausController();
-        Asiakas john = users.get(0);
-        Huone room1 = rooms.get(0);
-
-        Asiakas jane = users.get(1);
-        Huone room2 = rooms.get(3);
-
-        Asiakas john2 = users.get(2);
-
-        // Display available rooms before creating the reservation
-        System.out.println("\nAvailable Rooms (before reservation):");
-        List<Huone> availableRooms = controller.vapaatHuoneet(LocalDate.of(2024, 9, 10), LocalDate.of(2024, 9, 15));
-        for (Huone availableRoom : availableRooms) {
-            System.out.println("Room " + availableRoom.getHuone_nro() + " (" + availableRoom.getHuone_tyyppi() + ")");
-        }
-
-        // Create a reservation
-        controller.luoVaraus(room1, john, LocalDate.of(2024, 9, 10), LocalDate.of(2024, 9, 15));
-
-        List<Varaus> reservations = MockData.getMockReservations();
-        System.out.println("\nReservations:");
-        for (Varaus varaus : reservations) {
-            System.out.println("Room: " + varaus.getHuone().getHuone_nro() + " | User: " + varaus.getAsiakas().getEtunimi() + " | Dates: " + varaus.getAlkuPvm() + " to " + varaus.getLoppuPvm());
-        }
-
-        controller.luoVaraus(room2, jane, LocalDate.of(2024, 9, 5), LocalDate.of(2024, 9, 10));
+        HuoneController huoneController = new HuoneController();
 
-        System.out.println("\nReservations:");
-        for (Varaus varaus : reservations) {
-            System.out.println("Room: " + varaus.getHuone().getHuone_nro() + " | User: " + varaus.getAsiakas().getEtunimi() + " | Dates: " + varaus.getAlkuPvm() + " to " + varaus.getLoppuPvm());
-        }
+        // Haetaan vapaat huoneet
 
-/*
-        // Display available rooms after creating the reservation
-        System.out.println("\nAvailable Rooms (after reservation):");
-        availableRooms = controller.vapaatHuoneet(LocalDate.of(2024, 9, 10), LocalDate.of(2024, 9, 15));
-        for (Huone availableRoom : availableRooms) {
-            System.out.println("Room " + availableRoom.getHuone_nro() + " (" + availableRoom.getHuone_tyyppi() + ")");
-        }
 
-
-
-        // Cancel a reservation
-        controller.peruVaraus(reservations.get(0));
-
-        System.out.println("\nReservations:");
-        for (Varaus varaus : reservations) {
-            System.out.println("Room: " + varaus.getHuone().getHuoneNro() + " | User: " + varaus.getAsiakas().getEtunimi() + " | Dates: " + varaus.getAlkuPvm() + " to " + varaus.getLoppuPvm());
-        }
-
-        // Display available rooms after cancelling the reservation
-        System.out.println("\nAvailable Rooms (after cancelling reservation):");
-        availableRooms = controller.vapaatHuoneet(LocalDate.of(2024, 9, 10), LocalDate.of(2024, 9, 15));
-        for (Huone availableRoom : availableRooms) {
-            System.out.println("Room " + availableRoom.getHuoneNro() + " (" + availableRoom.getHuoneenTyyppi() + ")");
-        }
-
-        // Modify a reservation
-        controller.muokkaaVarausta(reservations.get(0), room1, LocalDate.of(2024, 9, 6), LocalDate.of(2024, 9, 10));
-
-        System.out.println("\nReservations:");
-        for (Varaus varaus : reservations) {
-            System.out.println("Room: " + varaus.getHuone().getHuoneNro() + " | User: " + varaus.getAsiakas().getEtunimi() + " | Dates: " + varaus.getAlkuPvm() + " to " + varaus.getLoppuPvm());
-        }
-
-        // Display available rooms after modifying the reservation
-        System.out.println("\nAvailable Rooms (after modifying reservation):");
-        availableRooms = controller.vapaatHuoneet(LocalDate.of(2024, 9, 5), LocalDate.of(2024, 9, 12));
-        for (Huone availableRoom : availableRooms) {
-            System.out.println("Room " + availableRoom.getHuoneNro() + " (" + availableRoom.getHuoneenTyyppi() + ")");
-        }
-
-         */
     }
 
 }
