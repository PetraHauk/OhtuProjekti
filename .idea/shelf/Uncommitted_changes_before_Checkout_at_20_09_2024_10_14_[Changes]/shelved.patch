Index: src/main/java/controller/HuoneController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport model.DAO.HuoneDAO;\r\nimport model.enteties.Huone;\r\nimport model.enteties.Hotelli;\r\nimport model.DAO.HotelliDAO;\r\n\r\npublic class HuoneController {\r\n    private HuoneDAO huoneDAO;\r\n    private HotelliDAO hotelliDAO;\r\n\r\n    public HuoneController() {\r\n        huoneDAO = new HuoneDAO();\r\n        hotelliDAO = new HotelliDAO();\r\n\r\n    }\r\n\r\n    public void lisaaHuone(int huone_nro, String huone_tyyppi, String huone_tila, double huone_hinta, int hotelli_id) {\r\n\r\n        // Tarkista, onko hotelli olemassa\r\n        Hotelli hotelli = hotelliDAO.findById(hotelli_id);\r\n        if (hotelli == null) {\r\n            System.out.println(\"Hotellia ei löytynyt ID:llä \" + hotelli_id);\r\n            return; // Lopetetaan toiminto, jos hotellia ei löydy\r\n        }\r\n\r\n        // Jos hotelli löytyy, lisätään huone\r\n        Huone huone = new Huone(0, huone_nro, huone_tyyppi, huone_tila, huone_hinta, hotelli_id);\r\n        huoneDAO.persist(huone);\r\n        System.out.println(\"Huone lisätty onnistuneesti hotelliin ID:llä \" + hotelli_id);\r\n    }\r\n\r\n    public void findHuoneById(int id) {\r\n        huoneDAO.findById(id);\r\n    }\r\n\r\n    public void findHuoneByTila(String huone_tila) {\r\n      huoneDAO.findByHuoneTila(huone_tila);\r\n    }\r\n\r\n    public void findHuoneByTyyppi(String huone_tyyppi) {\r\n        huoneDAO.findByTyyppi(huone_tyyppi);\r\n    }\r\n\r\n    public void updateHuoneTilaById(int id, String huone_tila) {\r\n        huoneDAO.updateTilaById(id, huone_tila);\r\n    }\r\n\r\n    public void updateHuoneHintaById(int id, double huone_hinta) {\r\n        huoneDAO.updateHintaById(id, huone_hinta);\r\n    }\r\n\r\n    public void deleteHuone(int id) {\r\n        huoneDAO.removeById(id);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controller/HuoneController.java b/src/main/java/controller/HuoneController.java
--- a/src/main/java/controller/HuoneController.java	(revision ae813440e2c1943c5f489f80dad40006e36b6572)
+++ b/src/main/java/controller/HuoneController.java	(date 1726816183005)
@@ -5,6 +5,8 @@
 import model.enteties.Hotelli;
 import model.DAO.HotelliDAO;
 
+import java.util.List;
+
 public class HuoneController {
     private HuoneDAO huoneDAO;
     private HotelliDAO hotelliDAO;
@@ -54,4 +56,11 @@
         huoneDAO.removeById(id);
     }
 
+    public List<Huone> findVapaatHuoneetByHotelli(int hotelli_id) {
+        List<Huone> huoneet = huoneDAO.haeHuoetByHotelli(hotelli_id);
+
+        return huoneet;
+
+    }
+
 }
Index: src/main/java/app/MainPetra.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app;\r\n\r\nimport controller.VarausController;\r\nimport model.enteties.Asiakas;\r\nimport model.enteties.Huone;\r\nimport model.enteties.Varaus;\r\nimport org.checkerframework.checker.units.qual.A;\r\n\r\nimport java.time.LocalDate;\r\nimport java.util.List;\r\n\r\npublic class MainPetra {\r\n    public static void main(String[] args) {\r\n\r\n        // Fetch mock users, rooms, and reservations\r\n        List<Asiakas> users = MockData.getMockUsers();\r\n        List<Huone> rooms = MockData.getMockRooms();\r\n\r\n        /*\r\n        System.out.println(\"Users:\");\r\n        for (Asiakas user : users) {\r\n            System.out.println(user.getEtunimi() + \" \" + user.getSukunimi());\r\n        }\r\n\r\n        System.out.println(\"\\nRooms:\");\r\n        for (Huone room : rooms) {\r\n            System.out.println(room.getHuoneNro() + \" | \" + room.getHinta() + \" | \" + room.getHuoneenTyyppi());\r\n        }\r\n\r\n         */\r\n\r\n        // Test the reservation system\r\n        VarausController controller = new VarausController();\r\n        Asiakas john = users.get(0);\r\n        Huone room1 = rooms.get(0);\r\n\r\n        Asiakas jane = users.get(1);\r\n        Huone room2 = rooms.get(3);\r\n\r\n        Asiakas john2 = users.get(2);\r\n\r\n        // Display available rooms before creating the reservation\r\n        System.out.println(\"\\nAvailable Rooms (before reservation):\");\r\n        List<Huone> availableRooms = controller.vapaatHuoneet(LocalDate.of(2024, 9, 10), LocalDate.of(2024, 9, 15));\r\n        for (Huone availableRoom : availableRooms) {\r\n            System.out.println(\"Room \" + availableRoom.getHuone_nro() + \" (\" + availableRoom.getHuone_tyyppi() + \")\");\r\n        }\r\n\r\n        // Create a reservation\r\n        controller.luoVaraus(room1, john, LocalDate.of(2024, 9, 10), LocalDate.of(2024, 9, 15));\r\n\r\n        List<Varaus> reservations = MockData.getMockReservations();\r\n        System.out.println(\"\\nReservations:\");\r\n        for (Varaus varaus : reservations) {\r\n            System.out.println(\"Room: \" + varaus.getHuone().getHuone_nro() + \" | User: \" + varaus.getAsiakas().getEtunimi() + \" | Dates: \" + varaus.getAlkuPvm() + \" to \" + varaus.getLoppuPvm());\r\n        }\r\n\r\n        controller.luoVaraus(room2, jane, LocalDate.of(2024, 9, 5), LocalDate.of(2024, 9, 10));\r\n\r\n        System.out.println(\"\\nReservations:\");\r\n        for (Varaus varaus : reservations) {\r\n            System.out.println(\"Room: \" + varaus.getHuone().getHuone_nro() + \" | User: \" + varaus.getAsiakas().getEtunimi() + \" | Dates: \" + varaus.getAlkuPvm() + \" to \" + varaus.getLoppuPvm());\r\n        }\r\n\r\n/*\r\n        // Display available rooms after creating the reservation\r\n        System.out.println(\"\\nAvailable Rooms (after reservation):\");\r\n        availableRooms = controller.vapaatHuoneet(LocalDate.of(2024, 9, 10), LocalDate.of(2024, 9, 15));\r\n        for (Huone availableRoom : availableRooms) {\r\n            System.out.println(\"Room \" + availableRoom.getHuone_nro() + \" (\" + availableRoom.getHuone_tyyppi() + \")\");\r\n        }\r\n\r\n\r\n\r\n        // Cancel a reservation\r\n        controller.peruVaraus(reservations.get(0));\r\n\r\n        System.out.println(\"\\nReservations:\");\r\n        for (Varaus varaus : reservations) {\r\n            System.out.println(\"Room: \" + varaus.getHuone().getHuoneNro() + \" | User: \" + varaus.getAsiakas().getEtunimi() + \" | Dates: \" + varaus.getAlkuPvm() + \" to \" + varaus.getLoppuPvm());\r\n        }\r\n\r\n        // Display available rooms after cancelling the reservation\r\n        System.out.println(\"\\nAvailable Rooms (after cancelling reservation):\");\r\n        availableRooms = controller.vapaatHuoneet(LocalDate.of(2024, 9, 10), LocalDate.of(2024, 9, 15));\r\n        for (Huone availableRoom : availableRooms) {\r\n            System.out.println(\"Room \" + availableRoom.getHuoneNro() + \" (\" + availableRoom.getHuoneenTyyppi() + \")\");\r\n        }\r\n\r\n        // Modify a reservation\r\n        controller.muokkaaVarausta(reservations.get(0), room1, LocalDate.of(2024, 9, 6), LocalDate.of(2024, 9, 10));\r\n\r\n        System.out.println(\"\\nReservations:\");\r\n        for (Varaus varaus : reservations) {\r\n            System.out.println(\"Room: \" + varaus.getHuone().getHuoneNro() + \" | User: \" + varaus.getAsiakas().getEtunimi() + \" | Dates: \" + varaus.getAlkuPvm() + \" to \" + varaus.getLoppuPvm());\r\n        }\r\n\r\n        // Display available rooms after modifying the reservation\r\n        System.out.println(\"\\nAvailable Rooms (after modifying reservation):\");\r\n        availableRooms = controller.vapaatHuoneet(LocalDate.of(2024, 9, 5), LocalDate.of(2024, 9, 12));\r\n        for (Huone availableRoom : availableRooms) {\r\n            System.out.println(\"Room \" + availableRoom.getHuoneNro() + \" (\" + availableRoom.getHuoneenTyyppi() + \")\");\r\n        }\r\n\r\n         */\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/app/MainPetra.java b/src/main/java/app/MainPetra.java
--- a/src/main/java/app/MainPetra.java	(revision ae813440e2c1943c5f489f80dad40006e36b6572)
+++ b/src/main/java/app/MainPetra.java	(date 1726816183009)
@@ -1,5 +1,6 @@
 package app;
 
+import controller.HuoneController;
 import controller.VarausController;
 import model.enteties.Asiakas;
 import model.enteties.Huone;
@@ -12,97 +13,11 @@
 public class MainPetra {
     public static void main(String[] args) {
 
-        // Fetch mock users, rooms, and reservations
-        List<Asiakas> users = MockData.getMockUsers();
-        List<Huone> rooms = MockData.getMockRooms();
-
-        /*
-        System.out.println("Users:");
-        for (Asiakas user : users) {
-            System.out.println(user.getEtunimi() + " " + user.getSukunimi());
-        }
-
-        System.out.println("\nRooms:");
-        for (Huone room : rooms) {
-            System.out.println(room.getHuoneNro() + " | " + room.getHinta() + " | " + room.getHuoneenTyyppi());
-        }
-
-         */
-
-        // Test the reservation system
-        VarausController controller = new VarausController();
-        Asiakas john = users.get(0);
-        Huone room1 = rooms.get(0);
-
-        Asiakas jane = users.get(1);
-        Huone room2 = rooms.get(3);
-
-        Asiakas john2 = users.get(2);
-
-        // Display available rooms before creating the reservation
-        System.out.println("\nAvailable Rooms (before reservation):");
-        List<Huone> availableRooms = controller.vapaatHuoneet(LocalDate.of(2024, 9, 10), LocalDate.of(2024, 9, 15));
-        for (Huone availableRoom : availableRooms) {
-            System.out.println("Room " + availableRoom.getHuone_nro() + " (" + availableRoom.getHuone_tyyppi() + ")");
-        }
-
-        // Create a reservation
-        controller.luoVaraus(room1, john, LocalDate.of(2024, 9, 10), LocalDate.of(2024, 9, 15));
-
-        List<Varaus> reservations = MockData.getMockReservations();
-        System.out.println("\nReservations:");
-        for (Varaus varaus : reservations) {
-            System.out.println("Room: " + varaus.getHuone().getHuone_nro() + " | User: " + varaus.getAsiakas().getEtunimi() + " | Dates: " + varaus.getAlkuPvm() + " to " + varaus.getLoppuPvm());
-        }
-
-        controller.luoVaraus(room2, jane, LocalDate.of(2024, 9, 5), LocalDate.of(2024, 9, 10));
+        HuoneController huoneController = new HuoneController();
 
-        System.out.println("\nReservations:");
-        for (Varaus varaus : reservations) {
-            System.out.println("Room: " + varaus.getHuone().getHuone_nro() + " | User: " + varaus.getAsiakas().getEtunimi() + " | Dates: " + varaus.getAlkuPvm() + " to " + varaus.getLoppuPvm());
-        }
+        // Haetaan vapaat huoneet
 
-/*
-        // Display available rooms after creating the reservation
-        System.out.println("\nAvailable Rooms (after reservation):");
-        availableRooms = controller.vapaatHuoneet(LocalDate.of(2024, 9, 10), LocalDate.of(2024, 9, 15));
-        for (Huone availableRoom : availableRooms) {
-            System.out.println("Room " + availableRoom.getHuone_nro() + " (" + availableRoom.getHuone_tyyppi() + ")");
-        }
 
-
-
-        // Cancel a reservation
-        controller.peruVaraus(reservations.get(0));
-
-        System.out.println("\nReservations:");
-        for (Varaus varaus : reservations) {
-            System.out.println("Room: " + varaus.getHuone().getHuoneNro() + " | User: " + varaus.getAsiakas().getEtunimi() + " | Dates: " + varaus.getAlkuPvm() + " to " + varaus.getLoppuPvm());
-        }
-
-        // Display available rooms after cancelling the reservation
-        System.out.println("\nAvailable Rooms (after cancelling reservation):");
-        availableRooms = controller.vapaatHuoneet(LocalDate.of(2024, 9, 10), LocalDate.of(2024, 9, 15));
-        for (Huone availableRoom : availableRooms) {
-            System.out.println("Room " + availableRoom.getHuoneNro() + " (" + availableRoom.getHuoneenTyyppi() + ")");
-        }
-
-        // Modify a reservation
-        controller.muokkaaVarausta(reservations.get(0), room1, LocalDate.of(2024, 9, 6), LocalDate.of(2024, 9, 10));
-
-        System.out.println("\nReservations:");
-        for (Varaus varaus : reservations) {
-            System.out.println("Room: " + varaus.getHuone().getHuoneNro() + " | User: " + varaus.getAsiakas().getEtunimi() + " | Dates: " + varaus.getAlkuPvm() + " to " + varaus.getLoppuPvm());
-        }
-
-        // Display available rooms after modifying the reservation
-        System.out.println("\nAvailable Rooms (after modifying reservation):");
-        availableRooms = controller.vapaatHuoneet(LocalDate.of(2024, 9, 5), LocalDate.of(2024, 9, 12));
-        for (Huone availableRoom : availableRooms) {
-            System.out.println("Room " + availableRoom.getHuoneNro() + " (" + availableRoom.getHuoneenTyyppi() + ")");
-        }
-
-         */
     }
 
 }
Index: .idea/dataSources.local.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"dataSourceStorageLocal\" created-in=\"IU-233.15619.7\">\r\n    <data-source name=\"@localhost\" uuid=\"aa989b5b-8fef-408c-b7b9-47f367b75a5e\">\r\n      <database-info product=\"MariaDB\" version=\"10.11.2-MariaDB\" jdbc-version=\"4.2\" driver-name=\"MariaDB Connector/J\" driver-version=\"3.0.7\" dbms=\"MARIADB\" exact-version=\"10.11.2\" exact-driver-version=\"3.0\">\r\n        <extra-name-characters>#@</extra-name-characters>\r\n        <identifier-quote-string>`</identifier-quote-string>\r\n      </database-info>\r\n      <case-sensitivity plain-identifiers=\"mixed\" quoted-identifiers=\"mixed\" />\r\n      <secret-storage>master_key</secret-storage>\r\n      <user-name>root</user-name>\r\n      <schema-mapping>\r\n        <introspection-scope>\r\n          <node kind=\"schema\">\r\n            <name qname=\"@\" />\r\n            <name qname=\"hotelli_db\" />\r\n          </node>\r\n        </introspection-scope>\r\n      </schema-mapping>\r\n    </data-source>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/dataSources.local.xml b/.idea/dataSources.local.xml
--- a/.idea/dataSources.local.xml	(revision ae813440e2c1943c5f489f80dad40006e36b6572)
+++ b/.idea/dataSources.local.xml	(date 1726816042659)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="dataSourceStorageLocal" created-in="IU-233.15619.7">
+  <component name="dataSourceStorageLocal" created-in="IU-233.13135.103">
     <data-source name="@localhost" uuid="aa989b5b-8fef-408c-b7b9-47f367b75a5e">
       <database-info product="MariaDB" version="10.11.2-MariaDB" jdbc-version="4.2" driver-name="MariaDB Connector/J" driver-version="3.0.7" dbms="MARIADB" exact-version="10.11.2" exact-driver-version="3.0">
         <extra-name-characters>#@</extra-name-characters>
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"AnnaMain\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"app.AnnaMain\" />\r\n      <module name=\"gui\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"app.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"app.Main\" />\r\n      <module name=\"gui\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"app.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"MainPetra\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"app.MainPetra\" />\r\n      <module name=\"gui\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"app.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.MainPetra\" />\r\n        <item itemvalue=\"Application.Main\" />\r\n        <item itemvalue=\"Application.AnnaMain\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision ae813440e2c1943c5f489f80dad40006e36b6572)
+++ b/.idea/workspace.xml	(date 1726816345346)
@@ -1,6 +1,35 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="RunManager">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
+  <component name="ChangeListManager">
+    <list default="true" id="8c6cd58b-5a82-4bea-9aff-d8e371835481" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/dataSources.local.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources.local.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/app/MainPetra.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/app/MainPetra.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/controller/HuoneController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/controller/HuoneController.java" afterDir="false" />
+    </list>
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$" value="main" />
+      </map>
+    </option>
+  </component>
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "git-widget-placeholder": "Petra",
+    "node.js.selected.package.tslint": "(autodetect)"
+  }
+}]]></component>
+  <component name="RunManager" selected="Application.MainPetra">
     <configuration name="AnnaMain" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="app.AnnaMain" />
       <module name="gui" />
@@ -29,6 +58,19 @@
     </configuration>
     <configuration name="MainPetra" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="app.MainPetra" />
+      <module name="gui" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="app.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="WilmaMain" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="app.WilmaMain" />
       <module name="gui" />
       <extension name="coverage">
         <pattern>
@@ -42,10 +84,15 @@
     </configuration>
     <recent_temporary>
       <list>
+        <item itemvalue="Application.WilmaMain" />
         <item itemvalue="Application.MainPetra" />
         <item itemvalue="Application.Main" />
         <item itemvalue="Application.AnnaMain" />
+        <item itemvalue="Application.WilmaMain" />
       </list>
     </recent_temporary>
   </component>
+  <component name="TaskManager">
+    <servers />
+  </component>
 </project>
\ No newline at end of file
